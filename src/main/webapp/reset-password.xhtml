<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:h="http://xmlns.jcp.org/jsf/html"
      xmlns:f="http://xmlns.jcp.org/jsf/core"
      lang="es" xml:lang="es">
<h:head>
    <title>Restablecer Contraseña</title>
    <meta http-equiv="Content-Type" content="application/xhtml+xml; charset=UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <style type="text/css">
        .code-inputs {
            display: flex;
            justify-content: space-between;
            gap: 10px;
        }

        .code-inputs input {
            width: 40px;
            height: 50px;
            text-align: center;
            font-size: 18px;
        }

        #resend-code {
            color: #3498db;
            cursor: pointer;
        }

        #resend-code:hover {
            text-decoration: underline;
        }

        /* Estilos adicionales para mensajes de error */
        .error-message {
            color: #e74c3c;
            font-size: 12px;
            margin-top: 5px;
        }
    </style>
</h:head>

<h:body>
    <div class="auth-container">
        <div class="auth-card">
            <h1 class="auth-title">Restablecer Contraseña</h1>
            <p class="auth-subtitle">Hemos enviado un código de 6 dígitos a tu correo electrónico</p>

            <h:form id="resetForm" styleClass="auth-form">
                <h:messages globalOnly="true" styleClass="error-message" />

                <div class="form-group">
                    <h:outputLabel for="verificationCode" value="Código de Verificación" />
                    <div class="code-inputs">
                        <h:inputText id="code1" value="#{passwordResetController.code1}"
                                     maxlength="1" size="1" required="true"
                                     requiredMessage="Código requerido"
                                     validatorMessage="Debe ser un dígito">
                            <f:validateRegex pattern="[0-9]" />
                        </h:inputText>
                        <h:inputText id="code2" value="#{passwordResetController.code2}"
                                     maxlength="1" size="1" required="true"
                                     requiredMessage="Código requerido"
                                     validatorMessage="Debe ser un dígito">
                            <f:validateRegex pattern="[0-9]" />
                        </h:inputText>
                        <h:inputText id="code3" value="#{passwordResetController.code3}"
                                     maxlength="1" size="1" required="true"
                                     requiredMessage="Código requerido"
                                     validatorMessage="Debe ser un dígito">
                            <f:validateRegex pattern="[0-9]" />
                        </h:inputText>
                        <h:inputText id="code4" value="#{passwordResetController.code4}"
                                     maxlength="1" size="1" required="true"
                                     requiredMessage="Código requerido"
                                     validatorMessage="Debe ser un dígito">
                            <f:validateRegex pattern="[0-9]" />
                        </h:inputText>
                        <h:inputText id="code5" value="#{passwordResetController.code5}"
                                     maxlength="1" size="1" required="true"
                                     requiredMessage="Código requerido"
                                     validatorMessage="Debe ser un dígito">
                            <f:validateRegex pattern="[0-9]" />
                        </h:inputText>
                        <h:inputText id="code6" value="#{passwordResetController.code6}"
                                     maxlength="1" size="1" required="true"
                                     requiredMessage="Código requerido"
                                     validatorMessage="Debe ser un dígito">
                            <f:validateRegex pattern="[0-9]" />
                        </h:inputText>
                    </div>
                    <h:message for="code1" styleClass="error-message" />
                </div>

                <div class="form-group">
                    <h:outputLabel for="newPassword" value="Nueva Contraseña" />
                    <h:inputSecret id="newPassword" value="#{passwordResetController.newPassword}"
                                   required="true" requiredMessage="La nueva contraseña es obligatoria" />
                    <h:message for="newPassword" styleClass="error-message" />
                </div>

                <div class="form-group">
                    <h:outputLabel for="confirmPassword" value="Confirmar Nueva Contraseña" />
                    <h:inputSecret id="confirmPassword" value="#{passwordResetController.confirmPassword}"
                                   required="true" requiredMessage="Debes confirmar la nueva contraseña" />
                    <h:message for="confirmPassword" styleClass="error-message" />
                </div>

                <h:commandButton value="Restablecer Contraseña"
                                 action="#{passwordResetController.resetPassword}"
                                 styleClass="auth-button" />
            </h:form>

            <div class="auth-footer">
                <p>¿No recibiste el código?
                    <h:commandLink value="Reenviar código"
                                   action="#{passwordResetController.resendCode}"
                                   id="resend-code" />
                </p>
            </div>
        </div>
    </div>

    <h:outputScript>
        // Script para manejar el auto-focus entre campos del código
        document.addEventListener('DOMContentLoaded', function() {
        var inputs = document.querySelectorAll('.code-inputs input');

        inputs.forEach(function(input, index) {
        // Mover al siguiente campo al ingresar un dígito
        input.addEventListener('input', function() {
        if (this.value.length === 1 && index < inputs.length - 1) {
        inputs[index + 1].focus();
        }
        });

        // Manejar retroceso para volver al campo anterior
        input.addEventListener('keydown', function(e) {
        if (e.key === 'Backspace' && this.value.length === 0 && index > 0) {
        inputs[index - 1].focus();
        }
        });
        });
        });
    </h:outputScript>
</h:body>
</html>